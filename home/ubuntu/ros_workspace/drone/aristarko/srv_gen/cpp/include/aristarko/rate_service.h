/* Auto-generated by genmsg_cpp for file /home/ubuntu/ros_workspace/drone/aristarko/srv/rate_service.srv */
#ifndef ARISTARKO_SERVICE_RATE_SERVICE_H
#define ARISTARKO_SERVICE_RATE_SERVICE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace aristarko
{
template <class ContainerAllocator>
struct rate_serviceRequest_ {
  typedef rate_serviceRequest_<ContainerAllocator> Type;

  rate_serviceRequest_()
  : rate(0)
  {
  }

  rate_serviceRequest_(const ContainerAllocator& _alloc)
  : rate(0)
  {
  }

  typedef uint32_t _rate_type;
  uint32_t rate;


  typedef boost::shared_ptr< ::aristarko::rate_serviceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aristarko::rate_serviceRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct rate_serviceRequest
typedef  ::aristarko::rate_serviceRequest_<std::allocator<void> > rate_serviceRequest;

typedef boost::shared_ptr< ::aristarko::rate_serviceRequest> rate_serviceRequestPtr;
typedef boost::shared_ptr< ::aristarko::rate_serviceRequest const> rate_serviceRequestConstPtr;



template <class ContainerAllocator>
struct rate_serviceResponse_ {
  typedef rate_serviceResponse_<ContainerAllocator> Type;

  rate_serviceResponse_()
  {
  }

  rate_serviceResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::aristarko::rate_serviceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aristarko::rate_serviceResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct rate_serviceResponse
typedef  ::aristarko::rate_serviceResponse_<std::allocator<void> > rate_serviceResponse;

typedef boost::shared_ptr< ::aristarko::rate_serviceResponse> rate_serviceResponsePtr;
typedef boost::shared_ptr< ::aristarko::rate_serviceResponse const> rate_serviceResponseConstPtr;


struct rate_service
{

typedef rate_serviceRequest Request;
typedef rate_serviceResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct rate_service
} // namespace aristarko

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::aristarko::rate_serviceRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::aristarko::rate_serviceRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::aristarko::rate_serviceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e2079609cc0d84210a175117b44fa8b1";
  }

  static const char* value(const  ::aristarko::rate_serviceRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe2079609cc0d8421ULL;
  static const uint64_t static_value2 = 0x0a175117b44fa8b1ULL;
};

template<class ContainerAllocator>
struct DataType< ::aristarko::rate_serviceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "aristarko/rate_serviceRequest";
  }

  static const char* value(const  ::aristarko::rate_serviceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::aristarko::rate_serviceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
uint32 rate\n\
\n\
\n\
";
  }

  static const char* value(const  ::aristarko::rate_serviceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::aristarko::rate_serviceRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::aristarko::rate_serviceResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::aristarko::rate_serviceResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::aristarko::rate_serviceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::aristarko::rate_serviceResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::aristarko::rate_serviceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "aristarko/rate_serviceResponse";
  }

  static const char* value(const  ::aristarko::rate_serviceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::aristarko::rate_serviceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
";
  }

  static const char* value(const  ::aristarko::rate_serviceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::aristarko::rate_serviceResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::aristarko::rate_serviceRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.rate);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct rate_serviceRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::aristarko::rate_serviceResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct rate_serviceResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<aristarko::rate_service> {
  static const char* value() 
  {
    return "e2079609cc0d84210a175117b44fa8b1";
  }

  static const char* value(const aristarko::rate_service&) { return value(); } 
};

template<>
struct DataType<aristarko::rate_service> {
  static const char* value() 
  {
    return "aristarko/rate_service";
  }

  static const char* value(const aristarko::rate_service&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<aristarko::rate_serviceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e2079609cc0d84210a175117b44fa8b1";
  }

  static const char* value(const aristarko::rate_serviceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<aristarko::rate_serviceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "aristarko/rate_service";
  }

  static const char* value(const aristarko::rate_serviceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<aristarko::rate_serviceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e2079609cc0d84210a175117b44fa8b1";
  }

  static const char* value(const aristarko::rate_serviceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<aristarko::rate_serviceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "aristarko/rate_service";
  }

  static const char* value(const aristarko::rate_serviceResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ARISTARKO_SERVICE_RATE_SERVICE_H

