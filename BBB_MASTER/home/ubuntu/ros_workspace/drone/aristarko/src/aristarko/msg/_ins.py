"""autogenerated by genpy from aristarko/ins.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class ins(genpy.Message):
  _md5sum = "ce9d7721509359b6db4409d7f333bf4b"
  _type = "aristarko/ins"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Vector3 RPY
geometry_msgs/Vector3 LLA
geometry_msgs/Vector3 Vel
================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  __slots__ = ['RPY','LLA','Vel']
  _slot_types = ['geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       RPY,LLA,Vel

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ins, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.RPY is None:
        self.RPY = geometry_msgs.msg.Vector3()
      if self.LLA is None:
        self.LLA = geometry_msgs.msg.Vector3()
      if self.Vel is None:
        self.Vel = geometry_msgs.msg.Vector3()
    else:
      self.RPY = geometry_msgs.msg.Vector3()
      self.LLA = geometry_msgs.msg.Vector3()
      self.Vel = geometry_msgs.msg.Vector3()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_9d.pack(_x.RPY.x, _x.RPY.y, _x.RPY.z, _x.LLA.x, _x.LLA.y, _x.LLA.z, _x.Vel.x, _x.Vel.y, _x.Vel.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.RPY is None:
        self.RPY = geometry_msgs.msg.Vector3()
      if self.LLA is None:
        self.LLA = geometry_msgs.msg.Vector3()
      if self.Vel is None:
        self.Vel = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 72
      (_x.RPY.x, _x.RPY.y, _x.RPY.z, _x.LLA.x, _x.LLA.y, _x.LLA.z, _x.Vel.x, _x.Vel.y, _x.Vel.z,) = _struct_9d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_9d.pack(_x.RPY.x, _x.RPY.y, _x.RPY.z, _x.LLA.x, _x.LLA.y, _x.LLA.z, _x.Vel.x, _x.Vel.y, _x.Vel.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.RPY is None:
        self.RPY = geometry_msgs.msg.Vector3()
      if self.LLA is None:
        self.LLA = geometry_msgs.msg.Vector3()
      if self.Vel is None:
        self.Vel = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 72
      (_x.RPY.x, _x.RPY.y, _x.RPY.z, _x.LLA.x, _x.LLA.y, _x.LLA.z, _x.Vel.x, _x.Vel.y, _x.Vel.z,) = _struct_9d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_9d = struct.Struct("<9d")
