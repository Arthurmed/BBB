/* Auto-generated by genmsg_cpp for file /home/ubuntu/ros_workspace/drone/aristarko/msg/ins_info.msg */
#ifndef ARISTARKO_MESSAGE_INS_INFO_H
#define ARISTARKO_MESSAGE_INS_INFO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace aristarko
{
template <class ContainerAllocator>
struct ins_info_ {
  typedef ins_info_<ContainerAllocator> Type;

  ins_info_()
  : GPSFIX(0)
  , INSTATUS(0)
  , INSGPS(0)
  {
  }

  ins_info_(const ContainerAllocator& _alloc)
  : GPSFIX(0)
  , INSTATUS(0)
  , INSGPS(0)
  {
  }

  typedef uint8_t _GPSFIX_type;
  uint8_t GPSFIX;

  typedef uint8_t _INSTATUS_type;
  uint8_t INSTATUS;

  typedef uint8_t _INSGPS_type;
  uint8_t INSGPS;


  typedef boost::shared_ptr< ::aristarko::ins_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aristarko::ins_info_<ContainerAllocator>  const> ConstPtr;
}; // struct ins_info
typedef  ::aristarko::ins_info_<std::allocator<void> > ins_info;

typedef boost::shared_ptr< ::aristarko::ins_info> ins_infoPtr;
typedef boost::shared_ptr< ::aristarko::ins_info const> ins_infoConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::aristarko::ins_info_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::aristarko::ins_info_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace aristarko

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::aristarko::ins_info_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::aristarko::ins_info_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::aristarko::ins_info_<ContainerAllocator> > {
  static const char* value() 
  {
    return "44d660226d6727b18faf15d28959495c";
  }

  static const char* value(const  ::aristarko::ins_info_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x44d660226d6727b1ULL;
  static const uint64_t static_value2 = 0x8faf15d28959495cULL;
};

template<class ContainerAllocator>
struct DataType< ::aristarko::ins_info_<ContainerAllocator> > {
  static const char* value() 
  {
    return "aristarko/ins_info";
  }

  static const char* value(const  ::aristarko::ins_info_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::aristarko::ins_info_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 GPSFIX\n\
uint8 INSTATUS\n\
uint8 INSGPS\n\
";
  }

  static const char* value(const  ::aristarko::ins_info_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::aristarko::ins_info_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::aristarko::ins_info_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.GPSFIX);
    stream.next(m.INSTATUS);
    stream.next(m.INSGPS);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ins_info_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aristarko::ins_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::aristarko::ins_info_<ContainerAllocator> & v) 
  {
    s << indent << "GPSFIX: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.GPSFIX);
    s << indent << "INSTATUS: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.INSTATUS);
    s << indent << "INSGPS: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.INSGPS);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARISTARKO_MESSAGE_INS_INFO_H

