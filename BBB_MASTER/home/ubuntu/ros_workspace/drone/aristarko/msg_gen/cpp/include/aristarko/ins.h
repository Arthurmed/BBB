/* Auto-generated by genmsg_cpp for file /home/ubuntu/ros_workspace/drone/aristarko/msg/ins.msg */
#ifndef ARISTARKO_MESSAGE_INS_H
#define ARISTARKO_MESSAGE_INS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Vector3.h"
#include "geometry_msgs/Vector3.h"
#include "geometry_msgs/Vector3.h"

namespace aristarko
{
template <class ContainerAllocator>
struct ins_ {
  typedef ins_<ContainerAllocator> Type;

  ins_()
  : RPY()
  , LLA()
  , Vel()
  {
  }

  ins_(const ContainerAllocator& _alloc)
  : RPY(_alloc)
  , LLA(_alloc)
  , Vel(_alloc)
  {
  }

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _RPY_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  RPY;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _LLA_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  LLA;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _Vel_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  Vel;


  typedef boost::shared_ptr< ::aristarko::ins_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aristarko::ins_<ContainerAllocator>  const> ConstPtr;
}; // struct ins
typedef  ::aristarko::ins_<std::allocator<void> > ins;

typedef boost::shared_ptr< ::aristarko::ins> insPtr;
typedef boost::shared_ptr< ::aristarko::ins const> insConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::aristarko::ins_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::aristarko::ins_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace aristarko

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::aristarko::ins_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::aristarko::ins_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::aristarko::ins_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ce9d7721509359b6db4409d7f333bf4b";
  }

  static const char* value(const  ::aristarko::ins_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xce9d7721509359b6ULL;
  static const uint64_t static_value2 = 0xdb4409d7f333bf4bULL;
};

template<class ContainerAllocator>
struct DataType< ::aristarko::ins_<ContainerAllocator> > {
  static const char* value() 
  {
    return "aristarko/ins";
  }

  static const char* value(const  ::aristarko::ins_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::aristarko::ins_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Vector3 RPY\n\
geometry_msgs/Vector3 LLA\n\
geometry_msgs/Vector3 Vel\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::aristarko::ins_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::aristarko::ins_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::aristarko::ins_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.RPY);
    stream.next(m.LLA);
    stream.next(m.Vel);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ins_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aristarko::ins_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::aristarko::ins_<ContainerAllocator> & v) 
  {
    s << indent << "RPY: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.RPY);
    s << indent << "LLA: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.LLA);
    s << indent << "Vel: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.Vel);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARISTARKO_MESSAGE_INS_H

